import { itShouldHaveNextValue, itShouldHavePreviousValue } from '../../../shared-examples'
import { personFactory, applicationFactory } from '../../../../testutils/factories/index'
import Vulnerability from './vulnerability'

describe('Vulnerability', () => {
  const application = applicationFactory.build({ person: personFactory.build({ name: 'Roger Smith' }) })

  describe('title', () => {
    it('personalises the page title', () => {
      const page = new Vulnerability({}, application)

      expect(page.title).toEqual("Roger Smith's vulnerability")
    })
  })

  describe('import date', () => {
    it('sets importDate to null where application contains no OASys import date', () => {
      const page = new Vulnerability({}, application)

      expect(page.importDate).toEqual(null)
    })
  })

  describe('Questions', () => {
    const page = new Vulnerability({}, application)

    describe('vulnerabilityDetail', () => {
      it('has a question', () => {
        expect(page.questions.vulnerabilityDetail.question).toBeDefined()
      })
    })
  })

  itShouldHaveNextValue(new Vulnerability({}, application), 'previous-and-current-risk')
  itShouldHavePreviousValue(new Vulnerability({}, application), 'taskList')

  describe('errors', () => {
    it('returns an error when the confirmation is blank', () => {
      const page = new Vulnerability({}, application)
      expect(page.errors()).toEqual({
        vulnerabilityDetail: "Describe Roger Smith's current circumstances, issues and needs related to vulnerability",
        confirmation: 'Confirm that the information is relevant and up to date',
      })
    })
  })

  describe('items', () => {
    it('returns the checkbox as expected', () => {
      const page = new Vulnerability({}, application)

      expect(page.items()).toEqual([
        { value: 'confirmed', text: 'I confirm this information is relevant and up to date.', checked: false },
      ])
    })
  })
})
